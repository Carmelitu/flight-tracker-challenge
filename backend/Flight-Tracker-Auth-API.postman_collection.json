{
  "info": {
    "name": "Flight Tracker Auth API",
    "description": "Complete API collection for Flight Tracker with Authentication",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5001",
      "type": "string"
    },
    {
      "key": "apiUrl",
      "value": "{{baseUrl}}/api",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "health"
          ]
        },
        "description": "Check if the server is running"
      },
      "response": []
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user and message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.user).to.have.property('username');",
                  "});",
                  "",
                  "pm.test(\"Cookies are set\", function () {",
                  "    pm.expect(pm.cookies.has('accessToken')).to.be.true;",
                  "    pm.expect(pm.cookies.has('refreshToken')).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/auth/login",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Login with admin credentials. Sets accessToken and refreshToken cookies."
          },
          "response": []
        },
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.include('Invalid username or password');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"wrong\",\n  \"password\": \"wrong\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/auth/login",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Test login with invalid credentials"
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('username');",
                  "    pm.expect(jsonData.user.username).to.eql('admin');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/auth/me",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "auth",
                "me"
              ]
            },
            "description": "Get current authenticated user info. Requires valid accessToken cookie."
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('Token refreshed successfully');",
                  "});",
                  "",
                  "pm.test(\"New access token cookie is set\", function () {",
                  "    pm.expect(pm.cookies.has('accessToken')).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/auth/refresh",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "auth",
                "refresh"
              ]
            },
            "description": "Refresh access token using refresh token cookie. Generates a new accessToken."
          },
          "response": []
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('Logout successful');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/auth/logout",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "auth",
                "logout"
              ]
            },
            "description": "Logout and clear authentication cookies"
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for login, logout, user info, and token refresh"
    },
    {
      "name": "Flights (Protected)",
      "item": [
        {
          "name": "Get All Flights",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/flights",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "flights"
              ]
            },
            "description": "Get all tracked flights. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Get All Flights - Unauthorized",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Clear cookies to test unauthorized access",
                  "pm.cookies.clear();"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.include('Access denied');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/flights",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "flights"
              ]
            },
            "description": "Test unauthorized access to flights endpoint"
          },
          "response": []
        },
        {
          "name": "Create Flight",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has flight data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('flightNumber');",
                  "    pm.expect(jsonData).to.have.property('origin');",
                  "    pm.expect(jsonData).to.have.property('destination');",
                  "});",
                  "",
                  "// Store flight ID for delete test",
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.globals.set('testFlightId', jsonData.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"flightNumber\": \"AA123\",\n  \"origin\": \"JFK\",\n  \"destination\": \"LAX\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/flights",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "flights"
              ]
            },
            "description": "Create a new flight. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Create Flight - Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has validation error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"flightNumber\": \"\",\n  \"origin\": \"JFK\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/flights",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "flights"
              ]
            },
            "description": "Test flight creation with invalid data"
          },
          "response": []
        },
        {
          "name": "Refresh All Flights",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/flights/refresh",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "flights",
                "refresh"
              ]
            },
            "description": "Refresh status of all flights. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Delete Flight",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/flights/{{testFlightId}}",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "flights",
                "{{testFlightId}}"
              ]
            },
            "description": "Delete a flight by ID. Uses the flight ID from the create flight test. Requires authentication."
          },
          "response": []
        }
      ],
      "description": "Flight management endpoints - all require authentication"
    },
    {
      "name": "Test Scenarios",
      "item": [
        {
          "name": "Complete Auth Flow",
          "item": [
            {
              "name": "1. Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Login successful\", function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.cookies.has('accessToken')).to.be.true;",
                      "    pm.expect(pm.cookies.has('refreshToken')).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin\"\n}"
                },
                "url": {
                  "raw": "{{apiUrl}}/auth/login",
                  "host": [
                    "{{apiUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "2. Access Protected Resource",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Access granted with valid token\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{apiUrl}}/flights",
                  "host": [
                    "{{apiUrl}}"
                  ],
                  "path": [
                    "flights"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "3. Get User Info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"User info retrieved\", function () {",
                      "    pm.response.to.have.status(200);",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.user.username).to.eql('admin');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{apiUrl}}/auth/me",
                  "host": [
                    "{{apiUrl}}"
                  ],
                  "path": [
                    "auth",
                    "me"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "4. Refresh Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Token refreshed successfully\", function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.cookies.has('accessToken')).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{apiUrl}}/auth/refresh",
                  "host": [
                    "{{apiUrl}}"
                  ],
                  "path": [
                    "auth",
                    "refresh"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "5. Logout",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Logout successful\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{apiUrl}}/auth/logout",
                  "host": [
                    "{{apiUrl}}"
                  ],
                  "path": [
                    "auth",
                    "logout"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "6. Access After Logout (Should Fail)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Access denied after logout\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{apiUrl}}/flights",
                  "host": [
                    "{{apiUrl}}"
                  ],
                  "path": [
                    "flights"
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Complete authentication flow test scenario"
        }
      ],
      "description": "Pre-built test scenarios for comprehensive testing"
    }
  ]
}